import flash.external.ExternalInterface;import org.osflash.thunderbolt.io.Console;import org.osflash.thunderbolt.data.Parser;import org.osflash.thunderbolt.data.StringyfiedObject;/** * The Commandline class enables several debugging features  * WHILE the movie is running. You can inspect an element or * set it's attributes. *  * @author Martin Kleppe <kleppe@gmail.com> */class org.osflash.thunderbolt.io.Commandline {		private static var initialized:Boolean;		/**	 * Initializes the Commandline callbacks.	 */	public static function initialize():Void{		if (!Commandline.initialized){						// associate external calls			ExternalInterface.addCallback("inspect", Commandline, Commandline.inspect);			ExternalInterface.addCallback("set", Commandline, Commandline.setAttribute);			ExternalInterface.addCallback("run", Commandline, Commandline.run);			Commandline.initialized = true;		}		}		/**	 * Inspects an object.	 * Usage: TB.inpect(target);	 */  	private static function inspect(target:String):Void{				var out:Object = _global[target] || _root[target] || eval(target);		Console.log(new StringyfiedObject(out, 10));		}		/**	 * Evaluates an expression.	 * Usage: TB.run(expression);	 */  		private static function run(expression:String):Void{				Console.log(eval(expression));	}		/**	 * Sets an objects attribute.	 * Usage: TB.set(target, value);	 */  		private static function setAttribute(target:String, value:String):Void{					var parts = target.split(".");				var property = parts.pop();		target = parts.join(".");		var object:Object = _global[target] || _root[target] || eval(target);		object[property] = value;				Console.log(new StringyfiedObject(object, 10));	}		}